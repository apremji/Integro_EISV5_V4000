def build(bld):
    
    toolchain = bld.env["UsedToolchain"]
    if not toolchain:
        bld.fatal('Environment parameter "UsedToolchain" is not available! Make sure to provide the environment parameter "UsedToolchain" in the root wscript file of your project. e.g.: conf.env["UsedToolchain"] = "gccarmemb"')
    
    platform  = bld.env["UsedPlatform"]
    if not platform:
        bld.fatal('Environment parameter "UsedPlatform" is not available! Make sure to provide the environment parameter "UsedPlatform" in the root wscript file of your project. e.g.: conf.env["UsedPlatform"]  = "netx90"')
    
    comp_prefix = bld.get_name_prefix(
        toolchain = toolchain,
        platform  = platform)

# Component cifXToolkit OS-Abstraction ------------------------------------------------------------
                           
    sources   = [
        "OSAbstraction/OS_Custom_netX.c",
        "User/TKitUser_Custom_netX.c",
        ]
    
    includes = [
        "OSAbstraction",
        ]

    bld.stlib(
        target          = "cifXToolkit_OSAbstraction",
        name            = comp_prefix + "cifXToolkit_OSAbstraction",
        description     = "Serial DPM cifXToolkit Library for netX90",
        displaygroup    = "Libraries",
        platform        = platform,
        toolchain       = toolchain, 
        use             = [
                           "Hil_Definition_cifXApi_sdk",
                           "cifXToolkit_sdk",
                           "Hil_Definition_netXFirmware_sdk",
                           "CMSIS_sdk",
                           "netx_drv_sdk",
                          ],
        source          = sources,
        includes        = includes,
        export_includes = includes,
    )

